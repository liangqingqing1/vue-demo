{"ast":null,"code":"require(\"core-js/modules/es.array.concat.js\");\nvar helperCreateTreeFunc = require('./helperCreateTreeFunc');\nfunction findTreeItem(parent, obj, iterate, context, path, node, parseChildren, opts) {\n  if (obj) {\n    var item, index, len, paths, nodes, match;\n    for (index = 0, len = obj.length; index < len; index++) {\n      item = obj[index];\n      paths = path.concat(['' + index]);\n      nodes = node.concat([item]);\n      if (iterate.call(context, item, index, obj, paths, parent, nodes)) {\n        return {\n          index: index,\n          item: item,\n          path: paths,\n          items: obj,\n          parent: parent,\n          nodes: nodes\n        };\n      }\n      if (parseChildren && item) {\n        match = findTreeItem(item, item[parseChildren], iterate, context, paths.concat([parseChildren]), nodes, parseChildren, opts);\n        if (match) {\n          return match;\n        }\n      }\n    }\n  }\n}\n\n/**\r\n  * 从树结构中查找匹配第一条数据的键、值、路径\r\n  *\r\n  * @param {Object} obj 对象/数组\r\n  * @param {Function} iterate(item, index, items, path, parent, nodes) 回调\r\n  * @param {Object} options {children: 'children'}\r\n  * @param {Object} context 上下文\r\n  * @return {Object} { item, index, items, path, parent, nodes }\r\n  */\nvar findTree = helperCreateTreeFunc(findTreeItem);\nmodule.exports = findTree;","map":{"version":3,"names":["helperCreateTreeFunc","require","findTreeItem","parent","obj","iterate","context","path","node","parseChildren","opts","item","index","len","paths","nodes","match","length","concat","call","items","findTree","module","exports"],"sources":["D:/program/LanqiaoVue/vue-demo/node_modules/xe-utils/findTree.js"],"sourcesContent":["var helperCreateTreeFunc = require('./helperCreateTreeFunc')\r\n\r\nfunction findTreeItem (parent, obj, iterate, context, path, node, parseChildren, opts) {\r\n  if (obj) {\r\n    var item, index, len, paths, nodes, match\r\n    for (index = 0, len = obj.length; index < len; index++) {\r\n      item = obj[index]\r\n      paths = path.concat(['' + index])\r\n      nodes = node.concat([item])\r\n      if (iterate.call(context, item, index, obj, paths, parent, nodes)) {\r\n        return { index: index, item: item, path: paths, items: obj, parent: parent, nodes: nodes }\r\n      }\r\n      if (parseChildren && item) {\r\n        match = findTreeItem(item, item[parseChildren], iterate, context, paths.concat([parseChildren]), nodes, parseChildren, opts)\r\n        if (match) {\r\n          return match\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n  * 从树结构中查找匹配第一条数据的键、值、路径\r\n  *\r\n  * @param {Object} obj 对象/数组\r\n  * @param {Function} iterate(item, index, items, path, parent, nodes) 回调\r\n  * @param {Object} options {children: 'children'}\r\n  * @param {Object} context 上下文\r\n  * @return {Object} { item, index, items, path, parent, nodes }\r\n  */\r\nvar findTree = helperCreateTreeFunc(findTreeItem)\r\n\r\nmodule.exports = findTree\r\n"],"mappings":";AAAA,IAAIA,oBAAoB,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAE5D,SAASC,YAAY,CAAEC,MAAM,EAAEC,GAAG,EAAEC,OAAO,EAAEC,OAAO,EAAEC,IAAI,EAAEC,IAAI,EAAEC,aAAa,EAAEC,IAAI,EAAE;EACrF,IAAIN,GAAG,EAAE;IACP,IAAIO,IAAI,EAAEC,KAAK,EAAEC,GAAG,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK;IACzC,KAAKJ,KAAK,GAAG,CAAC,EAAEC,GAAG,GAAGT,GAAG,CAACa,MAAM,EAAEL,KAAK,GAAGC,GAAG,EAAED,KAAK,EAAE,EAAE;MACtDD,IAAI,GAAGP,GAAG,CAACQ,KAAK,CAAC;MACjBE,KAAK,GAAGP,IAAI,CAACW,MAAM,CAAC,CAAC,EAAE,GAAGN,KAAK,CAAC,CAAC;MACjCG,KAAK,GAAGP,IAAI,CAACU,MAAM,CAAC,CAACP,IAAI,CAAC,CAAC;MAC3B,IAAIN,OAAO,CAACc,IAAI,CAACb,OAAO,EAAEK,IAAI,EAAEC,KAAK,EAAER,GAAG,EAAEU,KAAK,EAAEX,MAAM,EAAEY,KAAK,CAAC,EAAE;QACjE,OAAO;UAAEH,KAAK,EAAEA,KAAK;UAAED,IAAI,EAAEA,IAAI;UAAEJ,IAAI,EAAEO,KAAK;UAAEM,KAAK,EAAEhB,GAAG;UAAED,MAAM,EAAEA,MAAM;UAAEY,KAAK,EAAEA;QAAM,CAAC;MAC5F;MACA,IAAIN,aAAa,IAAIE,IAAI,EAAE;QACzBK,KAAK,GAAGd,YAAY,CAACS,IAAI,EAAEA,IAAI,CAACF,aAAa,CAAC,EAAEJ,OAAO,EAAEC,OAAO,EAAEQ,KAAK,CAACI,MAAM,CAAC,CAACT,aAAa,CAAC,CAAC,EAAEM,KAAK,EAAEN,aAAa,EAAEC,IAAI,CAAC;QAC5H,IAAIM,KAAK,EAAE;UACT,OAAOA,KAAK;QACd;MACF;IACF;EACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIK,QAAQ,GAAGrB,oBAAoB,CAACE,YAAY,CAAC;AAEjDoB,MAAM,CAACC,OAAO,GAAGF,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}