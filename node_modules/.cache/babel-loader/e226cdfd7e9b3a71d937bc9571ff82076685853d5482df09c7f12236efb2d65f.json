{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nexport default {\n  name: \"Login\",\n  data: function data() {\n    return {\n      loginForm: {\n        username: \"admin\",\n        password: \"1234\"\n      },\n      loading: false,\n      pwdType: \"password\"\n    };\n  },\n  computed: {\n    getUserId: function getUserId() {\n      return this.$store.state.userId;\n    }\n  },\n  methods: {\n    showPwd: function showPwd() {\n      if (this.pwdType === \"password\") {\n        this.pwdType = \"\";\n      } else {\n        this.pwdType = \"password\";\n      }\n    },\n    reset: function reset() {\n      // 重置会变成cookie里的值\n      // this.$refs.loginForm.resetFields();\n      this.loginForm.username = \"\";\n      this.loginForm.password = \"\";\n      this.loginForm.rememberMe = false;\n    },\n    getCookie: function getCookie() {\n      var username = Cookies.get('username');\n      var password = Cookies.get('password');\n      // 解密\n      var bytes = CryptoJS.AES.decrypt(password, \"key\");\n      var originalPW = bytes.toString(CryptoJS.enc.Utf8);\n      var rememberMe = Cookies.get('rememberMe');\n      // 保存cookie里面的加密后的密码\n      this.cookiePass = password === undefined ? '' : password;\n      password = password === undefined ? this.loginForm.password : originalPW;\n      this.loginForm = {\n        username: username === undefined ? this.loginForm.username : username,\n        password: password,\n        rememberMe: rememberMe === undefined ? false : Boolean(rememberMe)\n      };\n    },\n    // 使用状态管理，用封装的axios\n    handleLogin: function handleLogin() {\n      var _this = this;\n      this.$refs.loginForm.validate(function (valid) {\n        var user = {\n          username: _this.loginForm.username,\n          password: _this.loginForm.password,\n          rememberMe: _this.loginForm.rememberMe\n        };\n        // Encrypt 加密\n        var cipherPW = CryptoJS.AES.encrypt(user.password,\n        //账号 或者  密码\n        \"key\" //键\n        ).toString();\n        if (user.password !== _this.cookiePass) {\n          user.password = cipherPW;\n        }\n        if (valid) {\n          if (user.rememberMe) {\n            Cookies.set('username', user.username, {\n              expires: Config.passCookieExpires\n            });\n            Cookies.set('password', user.password, {\n              expires: Config.passCookieExpires\n            });\n            Cookies.set('rememberMe', user.rememberMe, {\n              expires: Config.passCookieExpires\n            });\n          } else {\n            Cookies.remove('username');\n            Cookies.remove('password');\n            Cookies.remove('rememberMe');\n          }\n          _this.$store.dispatch('Login', _this.loginForm).then(function (response) {\n            _this.loading = false;\n            console.log(response);\n            var statusCode = response.data.statusCode;\n            if (statusCode == 200) {\n              _this.$router.push({\n                path: '/dashboard'\n              });\n              window.localStorage.setItem(\"user\", JSON.stringify(response.data));\n            } else {\n              /* 弹出警告提示框 */\n              _this.$message({\n                showClose: true,\n                message: '用户名或密码错误！',\n                type: 'warning'\n              });\n            }\n          }).catch(function () {\n            _this.loading = false;\n          });\n        } else {\n          _this.$message({\n            showClose: true,\n            message: '用户名和密码不能为空！',\n            type: 'warning'\n          });\n        }\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";;;;AAyDA;EACAA;EACAC;IACA;MACAC;QACAC;QACAC;MACA;MACAC;MACAC;IACA;EACA;EACAC;IACAC;MACA;IACA;EACA;EACAC;IACAC;MACA;QACA;MACA;QACA;MACA;IACA;IAEAC;MACA;MACA;MACA;MACA;MACA;IACA;IACAC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACAR;MACA;QACAD;QACAC;QACAS;MACA;IACA;IAEA;IACAC;MAAA;MACA;QACA;UACAX;UACAC;UACAS;QACA;QACA;QACA,oCACAE;QAAA;QACA;QAAA,CACA;QACA;UACAA;QACA;QACA;UACA;YACAC;cAAAC;YAAA;YACAD;cAAAC;YAAA;YACAD;cAAAC;YAAA;UACA;YACAD;YACAA;YACAA;UACA;UACA;YACA;YACAE;YACA;YACA;cACA;gBAAAC;cAAA;cACAC;YACA;cACA;cACA;gBACAC;gBACAC;gBACAC;cACA;YACA;UACA;YACA;UACA;QACA;UACA;YACAF;YACAC;YACAC;UACA;QACA;MACA;IACA;EACA;AACA","names":["name","data","loginForm","username","password","loading","pwdType","computed","getUserId","methods","showPwd","reset","getCookie","rememberMe","handleLogin","user","Cookies","expires","console","path","window","showClose","message","type"],"sourceRoot":"src/views","sources":["Login.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-card class=\"login-form-layout\">\r\n      <el-form\r\n        autocomplete=\"on\"\r\n        :model=\"loginForm\"\r\n        ref=\"loginForm\"\r\n        label-position=\"left\"\r\n      >\r\n        <div style=\"text-align: center\">\r\n          <svg-icon icon-class=\"login-mall\" style=\"width: 56px;height: 56px;color: #409EFF\"></svg-icon>\r\n        </div>\r\n        <h2 class=\"login-title color-main\">登入</h2>\r\n        <el-form-item prop=\"username\">\r\n          <el-input\r\n            name=\"username\"\r\n            type=\"text\"\r\n            v-model=\"loginForm.username\"\r\n            autocomplete=\"on\"\r\n            placeholder=\"请输入用户名\"\r\n          >\r\n            <span slot=\"prefix\">\r\n              <svg-icon icon-class=\"user\" class=\"color-main\"></svg-icon>\r\n            </span>\r\n          </el-input>\r\n        </el-form-item>\r\n        <el-form-item prop=\"password\">\r\n          <el-input\r\n            name=\"password\"\r\n            :type=\"pwdType\"\r\n            @keyup.enter.native=\"handleLogin\"\r\n            v-model=\"loginForm.password\"\r\n            autocomplete=\"on\"\r\n            placeholder=\"请输入密码\"\r\n          >\r\n            <span slot=\"prefix\">\r\n              <svg-icon icon-class=\"password\" class=\"color-main\"></svg-icon>\r\n            </span>\r\n            <span slot=\"suffix\" @click=\"showPwd\">\r\n              <svg-icon icon-class=\"eye\" class=\"color-main\"></svg-icon>\r\n            </span>\r\n          </el-input>\r\n        </el-form-item>\r\n        <el-form-item style=\"margin-bottom: 60px\">\r\n          <el-button\r\n            style=\"width: 100%\"\r\n            type=\"primary\"\r\n            :loading=\"loading\"\r\n            @click.native.prevent=\"handleLogin\"\r\n          >登录</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"Login\",\r\n  data() {\r\n    return {\r\n      loginForm: {\r\n        username: \"admin\",\r\n        password: \"1234\"\r\n      },\r\n      loading: false,\r\n      pwdType: \"password\",\r\n    };\r\n  },\r\n  computed:{\r\n    getUserId(){\r\n      return this.$store.state.userId;\r\n    }\r\n  },\r\n  methods: {\r\n    showPwd() {\r\n      if (this.pwdType === \"password\") {\r\n        this.pwdType = \"\";\r\n      } else {\r\n        this.pwdType = \"password\";\r\n      }\r\n    },\r\n\r\n    reset() {\r\n      // 重置会变成cookie里的值\r\n      // this.$refs.loginForm.resetFields();\r\n      this.loginForm.username=\"\"\r\n      this.loginForm.password=\"\"\r\n      this.loginForm.rememberMe=false\r\n    },\r\n    getCookie() {\r\n      const username = Cookies.get('username')\r\n      let password = Cookies.get('password')\r\n      // 解密\r\n      var bytes = CryptoJS.AES.decrypt(password, \"key\");\r\n      var originalPW = bytes.toString(CryptoJS.enc.Utf8);\r\n      const rememberMe = Cookies.get('rememberMe')\r\n      // 保存cookie里面的加密后的密码\r\n      this.cookiePass = password === undefined ? '' : password\r\n      password = password === undefined ? this.loginForm.password : originalPW\r\n      this.loginForm = {\r\n        username: username === undefined ? this.loginForm.username : username,\r\n        password: password,\r\n        rememberMe: rememberMe === undefined ? false : Boolean(rememberMe)\r\n      }\r\n    },\r\n\r\n    // 使用状态管理，用封装的axios\r\n    handleLogin() {\r\n      this.$refs.loginForm.validate(valid => {\r\n        const user = {\r\n          username: this.loginForm.username,\r\n          password: this.loginForm.password,\r\n          rememberMe: this.loginForm.rememberMe,\r\n        }\r\n        // Encrypt 加密\r\n        var cipherPW = CryptoJS.AES.encrypt(\r\n          user.password,//账号 或者  密码\r\n          \"key\"  //键\r\n        ).toString();\r\n        if (user.password !== this.cookiePass) {\r\n          user.password = cipherPW\r\n        }\r\n        if(valid){\r\n          if (user.rememberMe) {\r\n            Cookies.set('username', user.username, { expires: Config.passCookieExpires })\r\n            Cookies.set('password', user.password, { expires: Config.passCookieExpires })\r\n            Cookies.set('rememberMe', user.rememberMe, { expires: Config.passCookieExpires })\r\n          } else {\r\n            Cookies.remove('username')\r\n            Cookies.remove('password')\r\n            Cookies.remove('rememberMe')\r\n          }\r\n          this.$store.dispatch('Login',this.loginForm).then((response) => {\r\n            this.loading = false\r\n            console.log(response)\r\n            let statusCode = response.data.statusCode\r\n            if(statusCode==200){\r\n              this.$router.push({ path: '/dashboard' })\r\n              window.localStorage.setItem(\"user\",JSON.stringify(response.data))\r\n            }else{\r\n              /* 弹出警告提示框 */\r\n              this.$message({\r\n                  showClose: true,\r\n                  message: '用户名或密码错误！',\r\n                  type: 'warning'\r\n                });\r\n            }\r\n          }).catch(() => {\r\n            this.loading = false\r\n          })\r\n        }else{\r\n          this.$message({\r\n            showClose: true,\r\n            message: '用户名和密码不能为空！',\r\n            type: 'warning'\r\n          });\r\n        }\r\n      });\r\n    }\r\n}\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.login-form-layout {\r\n  position: absolute;\r\n  left: 0;\r\n  right: 0;\r\n  width: 360px;\r\n  margin: 140px auto;\r\n  border-top: 10px solid #409eff;\r\n}\r\n\r\n.login-title {\r\n  text-align: center;\r\n}\r\n\r\n.login-center-layout {\r\n  background: #409eff;\r\n  width: auto;\r\n  height: auto;\r\n  max-width: 100%;\r\n  max-height: 100%;\r\n  margin-top: 200px;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}