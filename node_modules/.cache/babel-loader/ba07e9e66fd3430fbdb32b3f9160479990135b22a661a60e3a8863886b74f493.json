{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport Cookies from 'js-cookie';\nimport Background from '@/assets/images/background.webp';\nimport oa_logo from '@/assets/images/oa_logo.png';\nimport Config from '@/settings';\nimport CryptoJS from \"crypto-js\";\nexport default {\n  name: \"Login\",\n  data: function data() {\n    // var validatePw = (rule, value, callback) => {\n    //   if (value === '') {\n    //     callback(new Error('密码不能为空'));\n    //   } else {\n    //     if (this.loginForm.password !== '') {\n    //       this.$refs.loginForm.validateField('password');\n    //     }\n    //     callback();\n    //   }\n    // };\n    // var validateUn = (rule, value, callback) => {\n    //   if (value === '') {\n    //     callback(new Error('用户名不能为空'));\n    //   } else {\n    //     if (this.loginForm.username !== '') {\n    //       this.$refs.loginForm.validateField('username');\n    //     }\n    //     callback();\n    //   }\n    // };\n    return {\n      Background: Background,\n      oa_logo: oa_logo,\n      cookiePass: '',\n      loginForm: {\n        username: \"\",\n        password: \"\",\n        rememberMe: false\n      },\n      loading: false,\n      hide: true,\n      pwdType: \"password\",\n      loginRules: {\n        // password: [\n        //   { validator: validatePw, trigger: 'blur' }\n        // ],\n        // username: [\n        //   { validator: validateUn, trigger: 'blur' }\n        // ]\n        username: [{\n          required: true,\n          trigger: 'blur',\n          message: '用户名不能为空'\n        }],\n        password: [{\n          required: true,\n          trigger: 'blur',\n          message: '密码不能为空'\n        }]\n      }\n    };\n  },\n  // 生命周期钩子函数，一个 vue 实例被生成后会调用这个函数\n  created: function created() {\n    // 获取用户名密码等Cookie\n    this.getCookie();\n  },\n  computed: {\n    getUserId: function getUserId() {\n      return this.$store.state.userId;\n    }\n  },\n  methods: {\n    showPwd: function showPwd() {\n      if (this.pwdType === \"password\") {\n        this.pwdType = \"\";\n        this.hide = false;\n      } else {\n        this.pwdType = \"password\";\n        this.hide = true;\n      }\n    },\n    reset: function reset() {\n      // 重置会变成cookie里的值\n      // this.$refs.loginForm.resetFields();\n      this.loginForm.username = \"\";\n      this.loginForm.password = \"\";\n      this.loginForm.rememberMe = false;\n    },\n    getCookie: function getCookie() {\n      var username = Cookies.get('username');\n      var password = Cookies.get('password');\n      // 解密\n      var bytes = CryptoJS.AES.decrypt(password, \"key\");\n      var originalPW = bytes.toString(CryptoJS.enc.Utf8);\n      var rememberMe = Cookies.get('rememberMe');\n      // 保存cookie里面的加密后的密码\n      this.cookiePass = password === undefined ? '' : password;\n      password = password === undefined ? this.loginForm.password : originalPW;\n      this.loginForm = {\n        username: username === undefined ? this.loginForm.username : username,\n        password: password,\n        rememberMe: rememberMe === undefined ? false : Boolean(rememberMe)\n      };\n    },\n    // 使用状态管理，用封装的axios\n    handleLogin: function handleLogin() {\n      var _this = this;\n      this.loading = false;\n      this.$refs.loginForm.validate(function (valid) {\n        var user = {\n          username: _this.loginForm.username,\n          password: _this.loginForm.password,\n          rememberMe: _this.loginForm.rememberMe\n        };\n        // Encrypt 加密\n        var cipherPW = CryptoJS.AES.encrypt(user.password,\n        //账号 或者  密码\n        \"key\" //键\n        ).toString();\n        if (user.password !== _this.cookiePass) {\n          user.password = cipherPW;\n        }\n        if (valid) {\n          _this.$store.dispatch('Login', _this.loginForm).then(function (response) {\n            _this.loading = false;\n            console.log(response);\n            var statusCode = response.data.statusCode;\n            if (statusCode == 200) {\n              _this.$router.push({\n                path: '/dashboard'\n              });\n              window.localStorage.setItem(\"user\", JSON.stringify(response.data));\n              if (user.rememberMe) {\n                Cookies.set('username', user.username, {\n                  expires: Config.passCookieExpires\n                });\n                Cookies.set('password', user.password, {\n                  expires: Config.passCookieExpires\n                });\n                Cookies.set('rememberMe', user.rememberMe, {\n                  expires: Config.passCookieExpires\n                });\n              } else {\n                Cookies.remove('username');\n                Cookies.remove('password');\n                Cookies.remove('rememberMe');\n              }\n            } else {\n              /* 弹出警告提示框 */\n              _this.$message({\n                showClose: true,\n                message: '用户名或密码错误！',\n                type: 'warning'\n              });\n            }\n          }).catch(function () {\n            _this.loading = false;\n            _this.$message({\n              showClose: true,\n              message: '登录失败！后台未启动',\n              type: 'error'\n            });\n          });\n        } else {\n          _this.$message({\n            showClose: true,\n            message: '用户名和密码不能为空！',\n            type: 'warning'\n          });\n        }\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";;;;AAoEA;AACA;AACA;AACA;AACA;AAEA;EACAA;EACAC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;MACAC;MACAC;MACAC;MACAC;QACAC;QACAC;QACAC;MACA;MACAC;MACAC;MACAC;MACAC;QACA;QACA;QACA;QACA;QACA;QACA;QACAN;UAAAO;UAAAC;UAAAC;QAAA;QACAR;UAAAM;UAAAC;UAAAC;QAAA;MACA;IACA;EACA;EACA;EACAC;IACA;IACA;EACA;EACAC;IACAC;MACA;IACA;EACA;EACAC;IACAC;MACA;QACA;QACA;MACA;QACA;QACA;MACA;IACA;IACAC;MACA;MACA;MACA;MACA;MACA;IACA;IACAC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACAf;MACA;QACAD;QACAC;QACAC;MACA;IACA;IAEA;IACAe;MAAA;MACA;MACA;QACA;UACAjB;UACAC;UACAC;QACA;QACA;QACA,oCACAgB;QAAA;QACA;QAAA,CACA;QACA;UACAA;QACA;QACA;UACA;YACA;YACAC;YACA;YACA;cACA;gBAAAC;cAAA;cACAC;cACA;gBACAC;kBAAAC;gBAAA;gBACAD;kBAAAC;gBAAA;gBACAD;kBAAAC;gBAAA;cACA;gBACAD;gBACAA;gBACAA;cACA;YACA;cACA;cACA;gBACAE;gBACAf;gBACAgB;cACA;YACA;UACA;YACA;YACA;cACAD;cACAf;cACAgB;YACA;UACA;QACA;UACA;YACAD;YACAf;YACAgB;UACA;QACA;MACA;IACA;EACA;AACA","names":["name","data","Background","oa_logo","cookiePass","loginForm","username","password","rememberMe","loading","hide","pwdType","loginRules","required","trigger","message","created","computed","getUserId","methods","showPwd","reset","getCookie","handleLogin","user","console","path","window","Cookies","expires","showClose","type"],"sourceRoot":"src/views","sources":["Login.vue"],"sourcesContent":["<template>\r\n  <div class=\"login\" :style=\"'background-image:url('+ Background +');'\">\r\n    <el-card class=\"login-form-layout\">\r\n      <el-form\r\n          autocomplete=\"on\"\r\n          :model=\"loginForm\"\r\n          :rules=\"loginRules\"\r\n          ref=\"loginForm\"\r\n          label-position=\"left\"\r\n      >\r\n        <div style=\"text-align: center;margin-bottom: 20px;\">\r\n          <el-avatar id=\"avatar\" :size=\"150\" :src=\"oa_logo\"></el-avatar>\r\n        </div>\r\n        <h2 class=\"login-title\">欢迎登录</h2>\r\n        <el-form-item prop=\"username\">\r\n          <el-input\r\n              name=\"username\"\r\n              type=\"text\"\r\n              v-model=\"loginForm.username\"\r\n              autocomplete=\"on\"\r\n              placeholder=\"请输入用户名\"\r\n          >\r\n            <span slot=\"prefix\" style=\"padding-left:7px\">\r\n              <i class=\"fa fa-user\"></i>\r\n            </span>\r\n          </el-input>\r\n        </el-form-item>\r\n        <el-form-item prop=\"password\">\r\n          <el-input\r\n              name=\"password\"\r\n              :type=\"pwdType\"\r\n              @keyup.enter.native=\"handleLogin\"\r\n              v-model=\"loginForm.password\"\r\n              autocomplete=\"on\"\r\n              placeholder=\"请输入密码\"\r\n          >\r\n            <span slot=\"prefix\">\r\n              <i class=\"fa fa-key\" style=\"padding-left:7px\"></i>\r\n            </span>\r\n            <span slot=\"suffix\" @click=\"showPwd\" :hide=\"hide\" style=\"padding-right: 7px;\">\r\n              <i v-if=\"!hide\" class=\"fa fa-eye\"></i>\r\n              <i v-else class=\"fa fa-eye-slash\"></i>\r\n            </span>\r\n          </el-input>\r\n        </el-form-item>\r\n        <el-checkbox v-model=\"loginForm.rememberMe\" style=\"margin:0 0 25px 0;\">\r\n          记住我\r\n        </el-checkbox>\r\n        <el-form-item style=\"margin-bottom: 10px;text-align: center;\">\r\n          <el-button plain style=\"width: 45%\"                   \r\n                     @click.native.prevent=\"reset\"\r\n          >重置</el-button>\r\n          <el-button\r\n              style=\"width: 45%\"\r\n              type=\"primary\"\r\n              :loading=\"loading\"\r\n              @click.native.prevent=\"handleLogin\"\r\n          >\r\n            <span v-if=\"!loading\">登 录</span>\r\n            <span v-else>登 录 中...</span>\r\n          </el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Cookies from 'js-cookie'\r\nimport Background from '@/assets/images/background.webp'\r\nimport oa_logo from '@/assets/images/oa_logo.png'\r\nimport Config from '@/settings'\r\nimport CryptoJS from \"crypto-js\";\r\n\r\nexport default {\r\n  name: \"Login\",\r\n  data() {\r\n    // var validatePw = (rule, value, callback) => {\r\n    //   if (value === '') {\r\n    //     callback(new Error('密码不能为空'));\r\n    //   } else {\r\n    //     if (this.loginForm.password !== '') {\r\n    //       this.$refs.loginForm.validateField('password');\r\n    //     }\r\n    //     callback();\r\n    //   }\r\n    // };\r\n    // var validateUn = (rule, value, callback) => {\r\n    //   if (value === '') {\r\n    //     callback(new Error('用户名不能为空'));\r\n    //   } else {\r\n    //     if (this.loginForm.username !== '') {\r\n    //       this.$refs.loginForm.validateField('username');\r\n    //     }\r\n    //     callback();\r\n    //   }\r\n    // };\r\n    return {\r\n      Background: Background,\r\n      oa_logo:oa_logo,\r\n      cookiePass: '',\r\n      loginForm: {\r\n        username: \"\",\r\n        password: \"\",\r\n        rememberMe: false\r\n      },\r\n      loading: false,\r\n      hide:true,\r\n      pwdType: \"password\",\r\n      loginRules: {\r\n        // password: [\r\n        //   { validator: validatePw, trigger: 'blur' }\r\n        // ],\r\n        // username: [\r\n        //   { validator: validateUn, trigger: 'blur' }\r\n        // ]\r\n        username: [{ required: true, trigger: 'blur', message: '用户名不能为空' }],\r\n        password: [{ required: true, trigger: 'blur', message: '密码不能为空' }]\r\n      },\r\n    }\r\n  },\r\n  // 生命周期钩子函数，一个 vue 实例被生成后会调用这个函数\r\n  created() {\r\n    // 获取用户名密码等Cookie\r\n    this.getCookie()\r\n  },\r\n  computed:{\r\n    getUserId(){\r\n      return this.$store.state.userId;\r\n    }\r\n  },\r\n  methods: {\r\n    showPwd() {\r\n      if (this.pwdType === \"password\") {\r\n        this.pwdType = \"\";\r\n        this.hide=false\r\n      } else {\r\n        this.pwdType = \"password\";\r\n        this.hide=true\r\n      }\r\n    },\r\n    reset() {\r\n      // 重置会变成cookie里的值\r\n      // this.$refs.loginForm.resetFields();\r\n      this.loginForm.username=\"\"\r\n      this.loginForm.password=\"\"\r\n      this.loginForm.rememberMe=false\r\n    },\r\n    getCookie() {\r\n      const username = Cookies.get('username')\r\n      let password = Cookies.get('password')\r\n      // 解密\r\n      var bytes = CryptoJS.AES.decrypt(password, \"key\");\r\n      var originalPW = bytes.toString(CryptoJS.enc.Utf8);\r\n      const rememberMe = Cookies.get('rememberMe')\r\n      // 保存cookie里面的加密后的密码\r\n      this.cookiePass = password === undefined ? '' : password\r\n      password = password === undefined ? this.loginForm.password : originalPW\r\n      this.loginForm = {\r\n        username: username === undefined ? this.loginForm.username : username,\r\n        password: password,\r\n        rememberMe: rememberMe === undefined ? false : Boolean(rememberMe)\r\n      }\r\n    },\r\n\r\n    // 使用状态管理，用封装的axios\r\n    handleLogin() {\r\n      this.loading = false\r\n      this.$refs.loginForm.validate(valid => {\r\n        const user = {\r\n          username: this.loginForm.username,\r\n          password: this.loginForm.password,\r\n          rememberMe: this.loginForm.rememberMe,\r\n        }\r\n        // Encrypt 加密\r\n        var cipherPW = CryptoJS.AES.encrypt(\r\n            user.password,//账号 或者  密码\r\n            \"key\"  //键\r\n        ).toString();\r\n        if (user.password !== this.cookiePass) {\r\n          user.password = cipherPW\r\n        }\r\n        if(valid){\r\n          this.$store.dispatch('Login',this.loginForm).then((response) => {\r\n            this.loading = false\r\n            console.log(response)\r\n            let statusCode = response.data.statusCode\r\n            if(statusCode==200){\r\n              this.$router.push({ path: '/dashboard' })\r\n              window.localStorage.setItem(\"user\",JSON.stringify(response.data))\r\n              if (user.rememberMe) {\r\n                Cookies.set('username', user.username, { expires: Config.passCookieExpires })\r\n                Cookies.set('password', user.password, { expires: Config.passCookieExpires })\r\n                Cookies.set('rememberMe', user.rememberMe, { expires: Config.passCookieExpires })\r\n              } else {\r\n                Cookies.remove('username')\r\n                Cookies.remove('password')\r\n                Cookies.remove('rememberMe')\r\n              }\r\n            }else{\r\n              /* 弹出警告提示框 */\r\n              this.$message({\r\n                showClose: true,\r\n                message: '用户名或密码错误！',\r\n                type: 'warning'\r\n              });\r\n            }\r\n          }).catch(() => {\r\n            this.loading = false\r\n            this.$message({\r\n              showClose: true,\r\n              message: '登录失败！后台未启动',\r\n              type: 'error'\r\n          });\r\n          })\r\n        }else{\r\n          this.$message({\r\n            showClose: true,\r\n            message: '用户名和密码不能为空！',\r\n            type: 'warning'\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.login {\r\n  height: 100%;\r\n  background-size: cover;\r\n  /*background-color: rebeccapurple;*/\r\n}\r\n.login-form-layout {\r\n  width: 450px;\r\n  margin: auto;\r\n  margin-top: 80px;\r\n  box-shadow: 0 4px 4px 0 rgba(0, 0, 0, 0.49);\r\n}\r\n.login-form-layout{\r\n  background-color:rgba(255, 255, 255, 0.912) ;\r\n}\r\n.login-title {\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n  color: #409eff;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}