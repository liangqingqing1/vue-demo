{"ast":null,"code":"require(\"core-js/modules/es.array.concat.js\");\nrequire(\"core-js/modules/es.array.push.js\");\nvar helperCreateTreeFunc = require('./helperCreateTreeFunc');\nvar arrayEach = require('./arrayEach');\nvar assign = require('./assign');\nfunction searchTreeItem(parentAllow, parent, obj, iterate, context, path, node, parseChildren, opts) {\n  var paths, nodes, rest, isAllow, hasChild;\n  var rests = [];\n  var hasOriginal = opts.original;\n  var sourceData = opts.data;\n  var mapChildren = opts.mapChildren || parseChildren;\n  arrayEach(obj, function (item, index) {\n    paths = path.concat(['' + index]);\n    nodes = node.concat([item]);\n    isAllow = parentAllow || iterate.call(context, item, index, obj, paths, parent, nodes);\n    hasChild = parseChildren && item[parseChildren];\n    if (isAllow || hasChild) {\n      if (hasOriginal) {\n        rest = item;\n      } else {\n        rest = assign({}, item);\n        if (sourceData) {\n          rest[sourceData] = item;\n        }\n      }\n      rest[mapChildren] = searchTreeItem(isAllow, item, item[parseChildren], iterate, context, paths, nodes, parseChildren, opts);\n      if (isAllow || rest[mapChildren].length) {\n        rests.push(rest);\n      }\n    } else if (isAllow) {\n      rests.push(rest);\n    }\n  });\n  return rests;\n}\n\n/**\r\n  * 从树结构中根据回调查找数据\r\n  *\r\n  * @param {Object} obj 对象/数组\r\n  * @param {Function} iterate(item, index, items, path, parent, nodes) 回调\r\n  * @param {Object} options {children: 'children'}\r\n  * @param {Object} context 上下文\r\n  * @return {Array}\r\n  */\nvar searchTree = helperCreateTreeFunc(function (parent, obj, iterate, context, path, nodes, parseChildren, opts) {\n  return searchTreeItem(0, parent, obj, iterate, context, path, nodes, parseChildren, opts);\n});\nmodule.exports = searchTree;","map":{"version":3,"names":["helperCreateTreeFunc","require","arrayEach","assign","searchTreeItem","parentAllow","parent","obj","iterate","context","path","node","parseChildren","opts","paths","nodes","rest","isAllow","hasChild","rests","hasOriginal","original","sourceData","data","mapChildren","item","index","concat","call","length","push","searchTree","module","exports"],"sources":["D:/program/LanqiaoVue/vue-demo/node_modules/xe-utils/searchTree.js"],"sourcesContent":["var helperCreateTreeFunc = require('./helperCreateTreeFunc')\r\n\r\nvar arrayEach = require('./arrayEach')\r\n\r\nvar assign = require('./assign')\r\n\r\nfunction searchTreeItem (parentAllow, parent, obj, iterate, context, path, node, parseChildren, opts) {\r\n  var paths, nodes, rest, isAllow, hasChild\r\n  var rests = []\r\n  var hasOriginal = opts.original\r\n  var sourceData = opts.data\r\n  var mapChildren = opts.mapChildren || parseChildren\r\n  arrayEach(obj, function (item, index) {\r\n    paths = path.concat(['' + index])\r\n    nodes = node.concat([item])\r\n    isAllow = parentAllow || iterate.call(context, item, index, obj, paths, parent, nodes)\r\n    hasChild = parseChildren && item[parseChildren]\r\n    if (isAllow || hasChild) {\r\n      if (hasOriginal) {\r\n        rest = item\r\n      } else {\r\n        rest = assign({}, item)\r\n        if (sourceData) {\r\n          rest[sourceData] = item\r\n        }\r\n      }\r\n      rest[mapChildren] = searchTreeItem(isAllow, item, item[parseChildren], iterate, context, paths, nodes, parseChildren, opts)\r\n      if (isAllow || rest[mapChildren].length) {\r\n        rests.push(rest)\r\n      }\r\n    } else if (isAllow) {\r\n      rests.push(rest)\r\n    }\r\n  })\r\n  return rests\r\n}\r\n\r\n/**\r\n  * 从树结构中根据回调查找数据\r\n  *\r\n  * @param {Object} obj 对象/数组\r\n  * @param {Function} iterate(item, index, items, path, parent, nodes) 回调\r\n  * @param {Object} options {children: 'children'}\r\n  * @param {Object} context 上下文\r\n  * @return {Array}\r\n  */\r\nvar searchTree = helperCreateTreeFunc(function (parent, obj, iterate, context, path, nodes, parseChildren, opts) {\r\n  return searchTreeItem(0, parent, obj, iterate, context, path, nodes, parseChildren, opts)\r\n})\r\n\r\nmodule.exports = searchTree\r\n"],"mappings":";;AAAA,IAAIA,oBAAoB,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAE5D,IAAIC,SAAS,GAAGD,OAAO,CAAC,aAAa,CAAC;AAEtC,IAAIE,MAAM,GAAGF,OAAO,CAAC,UAAU,CAAC;AAEhC,SAASG,cAAc,CAAEC,WAAW,EAAEC,MAAM,EAAEC,GAAG,EAAEC,OAAO,EAAEC,OAAO,EAAEC,IAAI,EAAEC,IAAI,EAAEC,aAAa,EAAEC,IAAI,EAAE;EACpG,IAAIC,KAAK,EAAEC,KAAK,EAAEC,IAAI,EAAEC,OAAO,EAAEC,QAAQ;EACzC,IAAIC,KAAK,GAAG,EAAE;EACd,IAAIC,WAAW,GAAGP,IAAI,CAACQ,QAAQ;EAC/B,IAAIC,UAAU,GAAGT,IAAI,CAACU,IAAI;EAC1B,IAAIC,WAAW,GAAGX,IAAI,CAACW,WAAW,IAAIZ,aAAa;EACnDV,SAAS,CAACK,GAAG,EAAE,UAAUkB,IAAI,EAAEC,KAAK,EAAE;IACpCZ,KAAK,GAAGJ,IAAI,CAACiB,MAAM,CAAC,CAAC,EAAE,GAAGD,KAAK,CAAC,CAAC;IACjCX,KAAK,GAAGJ,IAAI,CAACgB,MAAM,CAAC,CAACF,IAAI,CAAC,CAAC;IAC3BR,OAAO,GAAGZ,WAAW,IAAIG,OAAO,CAACoB,IAAI,CAACnB,OAAO,EAAEgB,IAAI,EAAEC,KAAK,EAAEnB,GAAG,EAAEO,KAAK,EAAER,MAAM,EAAES,KAAK,CAAC;IACtFG,QAAQ,GAAGN,aAAa,IAAIa,IAAI,CAACb,aAAa,CAAC;IAC/C,IAAIK,OAAO,IAAIC,QAAQ,EAAE;MACvB,IAAIE,WAAW,EAAE;QACfJ,IAAI,GAAGS,IAAI;MACb,CAAC,MAAM;QACLT,IAAI,GAAGb,MAAM,CAAC,CAAC,CAAC,EAAEsB,IAAI,CAAC;QACvB,IAAIH,UAAU,EAAE;UACdN,IAAI,CAACM,UAAU,CAAC,GAAGG,IAAI;QACzB;MACF;MACAT,IAAI,CAACQ,WAAW,CAAC,GAAGpB,cAAc,CAACa,OAAO,EAAEQ,IAAI,EAAEA,IAAI,CAACb,aAAa,CAAC,EAAEJ,OAAO,EAAEC,OAAO,EAAEK,KAAK,EAAEC,KAAK,EAAEH,aAAa,EAAEC,IAAI,CAAC;MAC3H,IAAII,OAAO,IAAID,IAAI,CAACQ,WAAW,CAAC,CAACK,MAAM,EAAE;QACvCV,KAAK,CAACW,IAAI,CAACd,IAAI,CAAC;MAClB;IACF,CAAC,MAAM,IAAIC,OAAO,EAAE;MAClBE,KAAK,CAACW,IAAI,CAACd,IAAI,CAAC;IAClB;EACF,CAAC,CAAC;EACF,OAAOG,KAAK;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIY,UAAU,GAAG/B,oBAAoB,CAAC,UAAUM,MAAM,EAAEC,GAAG,EAAEC,OAAO,EAAEC,OAAO,EAAEC,IAAI,EAAEK,KAAK,EAAEH,aAAa,EAAEC,IAAI,EAAE;EAC/G,OAAOT,cAAc,CAAC,CAAC,EAAEE,MAAM,EAAEC,GAAG,EAAEC,OAAO,EAAEC,OAAO,EAAEC,IAAI,EAAEK,KAAK,EAAEH,aAAa,EAAEC,IAAI,CAAC;AAC3F,CAAC,CAAC;AAEFmB,MAAM,CAACC,OAAO,GAAGF,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}