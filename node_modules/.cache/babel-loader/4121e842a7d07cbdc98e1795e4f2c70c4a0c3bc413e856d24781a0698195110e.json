{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport { login } from '@/api/login'; //引入登录 api 接口\nimport { getPermissionByUserId as _getPermissionByUserId } from '@/api/permission'; // 引入获取菜单权限 api 接口\nimport { getToken } from '@/utils/auth';\nvar user = {\n  // state: {\n  //   // token: getToken(),\n  //   // 是否登录\n  //   isLogin:false,\n  //   userId:'1'\n  // },\n  // mutations: {\n  //   SET_TOKEN: (state, token) => {\n  //     state.token = token\n  //   },\n  //   SET_ISLOGIN:(state,isLogin)=>{\n  //       state.isLogin=isLogin\n  //   },\n  //   SET_USERID:(state,userId)=>{\n  //     state.userId=userId\n  //   }\n  // },\n  actions: {\n    // 登录\n    Login: function Login(_ref, loginInfo) {\n      var commit = _ref.commit;\n      //定义 Login 方法，在组件中使用 this.$store.dispatch(\"Login\") 调用\n      return new Promise(function (resolve, reject) {\n        //封装一个 Promise\n        login(loginInfo).then(function (response) {\n          //使用 login 接口进行网络请求\n          // commit('') //提交一个 mutation，通知状态改变\n          // commit('SET_ISLOGIN',true)\n          // commit('SET_USERID',1)\n          resolve(response); //将结果封装进 Promise\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n    getPermissionByUserId: function getPermissionByUserId(_ref2, userId) {\n      var commit = _ref2.commit;\n      return new Promise(function (resolve, reject) {\n        //封装一个 Promise\n        _getPermissionByUserId(loginInfo).then(function (response) {\n          //使用 login 接口进行网络请求\n          // commit('') //提交一个 mutation，通知状态改变\n          // commit('SET_ISLOGIN',true)\n          // commit('SET_USERID',1)\n          resolve(response); //将结果封装进 Promise\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    }\n  }\n};\nexport default user;","map":{"version":3,"names":["login","getPermissionByUserId","getToken","user","actions","Login","loginInfo","commit","Promise","resolve","reject","then","response","catch","error","userId"],"sources":["D:/program/LanqiaoVue/vue-demo/src/store/modules/user.js"],"sourcesContent":["import { login } from '@/api/login'//引入登录 api 接口\r\nimport {getPermissionByUserId} from '@/api/permission' // 引入获取菜单权限 api 接口\r\nimport { getToken } from '@/utils/auth'\r\n\r\nconst user = {\r\n  // state: {\r\n  //   // token: getToken(),\r\n  //   // 是否登录\r\n  //   isLogin:false,\r\n  //   userId:'1'\r\n  // },\r\n  // mutations: {\r\n  //   SET_TOKEN: (state, token) => {\r\n  //     state.token = token\r\n  //   },\r\n  //   SET_ISLOGIN:(state,isLogin)=>{\r\n  //       state.isLogin=isLogin\r\n  //   },\r\n  //   SET_USERID:(state,userId)=>{\r\n  //     state.userId=userId\r\n  //   }\r\n  // },\r\n  actions: {\r\n    // 登录\r\n    Login({ commit }, loginInfo) { //定义 Login 方法，在组件中使用 this.$store.dispatch(\"Login\") 调用\r\n      return new Promise((resolve, reject) => { //封装一个 Promise\r\n        login(loginInfo).then(response => { //使用 login 接口进行网络请求\r\n          // commit('') //提交一个 mutation，通知状态改变\r\n          // commit('SET_ISLOGIN',true)\r\n          // commit('SET_USERID',1)\r\n          resolve(response) //将结果封装进 Promise\r\n        }).catch(error => {\r\n          reject(error)\r\n        })\r\n      })\r\n    },\r\n    getPermissionByUserId({commit},userId){\r\n      return new Promise((resolve, reject) => { //封装一个 Promise\r\n        getPermissionByUserId(loginInfo).then(response => { //使用 login 接口进行网络请求\r\n          // commit('') //提交一个 mutation，通知状态改变\r\n          // commit('SET_ISLOGIN',true)\r\n          // commit('SET_USERID',1)\r\n          resolve(response) //将结果封装进 Promise\r\n        }).catch(error => {\r\n          reject(error)\r\n        })\r\n      })\r\n    }\r\n  }\r\n}\r\nexport default user\r\n"],"mappings":";AAAA,SAASA,KAAK,QAAQ,aAAa;AACnC,SAAQC,qBAAqB,IAArBA,sBAAqB,QAAO,kBAAkB,EAAC;AACvD,SAASC,QAAQ,QAAQ,cAAc;AAEvC,IAAMC,IAAI,GAAG;EACX;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,OAAO,EAAE;IACP;IACAC,KAAK,uBAAaC,SAAS,EAAE;MAAA,IAArBC,MAAM,QAANA,MAAM;MAAiB;MAC7B,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;QAAE;QACxCV,KAAK,CAACM,SAAS,CAAC,CAACK,IAAI,CAAC,UAAAC,QAAQ,EAAI;UAAE;UAClC;UACA;UACA;UACAH,OAAO,CAACG,QAAQ,CAAC,EAAC;QACpB,CAAC,CAAC,CAACC,KAAK,CAAC,UAAAC,KAAK,EAAI;UAChBJ,MAAM,CAACI,KAAK,CAAC;QACf,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IACDb,qBAAqB,wCAAUc,MAAM,EAAC;MAAA,IAAfR,MAAM,SAANA,MAAM;MAC3B,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;QAAE;QACxCT,sBAAqB,CAACK,SAAS,CAAC,CAACK,IAAI,CAAC,UAAAC,QAAQ,EAAI;UAAE;UAClD;UACA;UACA;UACAH,OAAO,CAACG,QAAQ,CAAC,EAAC;QACpB,CAAC,CAAC,CAACC,KAAK,CAAC,UAAAC,KAAK,EAAI;UAChBJ,MAAM,CAACI,KAAK,CAAC;QACf,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EACF;AACF,CAAC;AACD,eAAeX,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}