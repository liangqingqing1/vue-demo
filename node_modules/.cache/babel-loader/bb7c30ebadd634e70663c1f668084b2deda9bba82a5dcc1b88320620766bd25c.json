{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\nvar setupDefaults = require('./setupDefaults');\nvar map = require('./map');\nvar orderBy = require('./orderBy');\nvar clone = require('./clone');\nvar includes = require('./includes');\nvar each = require('./each');\nvar remove = require('./remove');\nvar assign = require('./assign');\nfunction strictTree(array, optChildren) {\n  each(array, function (item) {\n    if (item.children && !item.children.length) {\n      remove(item, optChildren);\n    }\n  });\n}\n\n/**\r\n  * 将一个带层级的数据列表转成树结构\r\n  *\r\n  * @param {Array} array 数组\r\n  * @param {Object} options {strict: false, parentKey: 'parentId', key: 'id', children: 'children', mapChildren: 'children', data: 'data'}\r\n  * @return {Array}\r\n  */\nfunction toArrayTree(array, options) {\n  var opts = assign({}, setupDefaults.treeOptions, options);\n  var optStrict = opts.strict;\n  var optKey = opts.key;\n  var optParentKey = opts.parentKey;\n  var optChildren = opts.children;\n  var optMapChildren = opts.mapChildren;\n  var optSortKey = opts.sortKey;\n  var optReverse = opts.reverse;\n  var optData = opts.data;\n  var result = [];\n  var treeMap = {};\n  var idsMap = {};\n  var id, treeData, parentId;\n  if (optSortKey) {\n    array = orderBy(clone(array), optSortKey);\n    if (optReverse) {\n      array = array.reverse();\n    }\n  }\n  each(array, function (item) {\n    id = item[optKey];\n    idsMap[id] = true;\n  });\n  each(array, function (item) {\n    id = item[optKey];\n    if (optData) {\n      treeData = {};\n      treeData[optData] = item;\n    } else {\n      treeData = item;\n    }\n    parentId = item[optParentKey];\n    treeMap[id] = treeMap[id] || [];\n    treeMap[parentId] = treeMap[parentId] || [];\n    treeMap[parentId].push(treeData);\n    treeData[optKey] = id;\n    treeData[optParentKey] = parentId;\n    treeData[optChildren] = treeMap[id];\n    if (optMapChildren) {\n      treeData[optMapChildren] = treeMap[id];\n    }\n    if (!optStrict || optStrict && !parentId) {\n      if (!idsMap[parentId]) {\n        result.push(treeData);\n      }\n    }\n  });\n  if (optStrict) {\n    strictTree(array, optChildren);\n  }\n  return result;\n}\nmodule.exports = toArrayTree;","map":{"version":3,"names":["setupDefaults","require","map","orderBy","clone","includes","each","remove","assign","strictTree","array","optChildren","item","children","length","toArrayTree","options","opts","treeOptions","optStrict","strict","optKey","key","optParentKey","parentKey","optMapChildren","mapChildren","optSortKey","sortKey","optReverse","reverse","optData","data","result","treeMap","idsMap","id","treeData","parentId","push","module","exports"],"sources":["D:/program/LanqiaoVue/vue-demo/node_modules/xe-utils/toArrayTree.js"],"sourcesContent":["var setupDefaults = require('./setupDefaults')\r\n\r\nvar map = require('./map')\r\nvar orderBy = require('./orderBy')\r\n\r\nvar clone = require('./clone')\r\nvar includes = require('./includes')\r\nvar each = require('./each')\r\nvar remove = require('./remove')\r\n\r\nvar assign = require('./assign')\r\n\r\nfunction strictTree (array, optChildren) {\r\n  each(array, function (item) {\r\n    if (item.children && !item.children.length) {\r\n      remove(item, optChildren)\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n  * 将一个带层级的数据列表转成树结构\r\n  *\r\n  * @param {Array} array 数组\r\n  * @param {Object} options {strict: false, parentKey: 'parentId', key: 'id', children: 'children', mapChildren: 'children', data: 'data'}\r\n  * @return {Array}\r\n  */\r\nfunction toArrayTree (array, options) {\r\n  var opts = assign({}, setupDefaults.treeOptions, options)\r\n  var optStrict = opts.strict\r\n  var optKey = opts.key\r\n  var optParentKey = opts.parentKey\r\n  var optChildren = opts.children\r\n  var optMapChildren = opts.mapChildren\r\n  var optSortKey = opts.sortKey\r\n  var optReverse = opts.reverse\r\n  var optData = opts.data\r\n  var result = []\r\n  var treeMap = {}\r\n  var idsMap = {}\r\n  var id, treeData, parentId\r\n\r\n  if (optSortKey) {\r\n    array = orderBy(clone(array), optSortKey)\r\n    if (optReverse) {\r\n      array = array.reverse()\r\n    }\r\n  }\r\n\r\n  each(array, function (item) {\r\n    id = item[optKey]\r\n    idsMap[id] = true\r\n  })\r\n\r\n  each(array, function (item) {\r\n    id = item[optKey]\r\n\r\n    if (optData) {\r\n      treeData = {}\r\n      treeData[optData] = item\r\n    } else {\r\n      treeData = item\r\n    }\r\n\r\n    parentId = item[optParentKey]\r\n    treeMap[id] = treeMap[id] || []\r\n    treeMap[parentId] = treeMap[parentId] || []\r\n    treeMap[parentId].push(treeData)\r\n    treeData[optKey] = id\r\n    treeData[optParentKey] = parentId\r\n    treeData[optChildren] = treeMap[id]\r\n    if (optMapChildren) {\r\n      treeData[optMapChildren] = treeMap[id]\r\n    }\r\n\r\n    if (!optStrict || (optStrict && !parentId)) {\r\n      if (!idsMap[parentId]) {\r\n        result.push(treeData)\r\n      }\r\n    }\r\n  })\r\n\r\n  if (optStrict) {\r\n    strictTree(array, optChildren)\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nmodule.exports = toArrayTree\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}