{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport { login } from '@/api/login'; //引入登录 api 接口\nimport { getPermissionByUserId } from '@/api/permission'; // 引入获取菜单权限 api 接口\nimport { getUserList, getUserListByPage } from '@/api/system'; // 引入 系统管理接口\n\nimport { getToken } from '@/utils/auth';\nvar user = {\n  // state: {\n  //   // token: getToken(),\n  //   // 是否登录\n  //   isLogin:false,\n  //   userId:'1'\n  // },\n  // mutations: {\n  //   SET_TOKEN: (state, token) => {\n  //     state.token = token\n  //   },\n  //   SET_ISLOGIN:(state,isLogin)=>{\n  //       state.isLogin=isLogin\n  //   },\n  //   SET_USERID:(state,userId)=>{\n  //     state.userId=userId\n  //   }\n  // },\n  actions: {\n    // 登录\n    Login: function Login(_ref, loginInfo) {\n      var commit = _ref.commit;\n      //定义 Login 方法，在组件中使用 this.$store.dispatch(\"Login\") 调用\n      return new Promise(function (resolve, reject) {\n        //封装一个 Promise\n        login(loginInfo).then(function (response) {\n          //使用 login 接口进行网络请求\n          // commit('') //提交一个 mutation，通知状态改变\n          // commit('SET_ISLOGIN',true)\n          // commit('SET_USERID',1)\n          resolve(response); //将结果封装进 Promise\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n    // 获取菜单权限列表\n    GetPermissionByUserId: function GetPermissionByUserId(_ref2, userId) {\n      var commit = _ref2.commit;\n      return new Promise(function (resolve, reject) {\n        //封装一个 Promise\n        getPermissionByUserId(userId).then(function (response) {\n          //使用 permission 接口进行网络请求\n          resolve(response); //将结果封装进 Promise\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n    // 获取员工列表\n    GetUserList: function GetUserList(_ref3) {\n      var commit = _ref3.commit;\n      return new Promise(function (resolve, reject) {\n        //封装一个 Promise\n        getUserList().then(function (response) {\n          //使用 permission 接口进行网络请求\n          resolve(response); //将结果封装进 Promise\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n    GetUserListByPage: function GetUserListByPage(_ref4, tablePage) {\n      var commit = _ref4.commit;\n      console.log(tablePage);\n      return new Promise(function (resolve, reject) {\n        //封装一个 Promise\n        getUserListByPage(tablePage).then(function (response) {\n          //使用 permission 接口进行网络请求\n          resolve(response); //将结果封装进 Promise\n        }).catch(function (error) {\n          console.log(\"eee\");\n          reject(error);\n        });\n      });\n    }\n  }\n};\nexport default user;","map":{"version":3,"names":["login","getPermissionByUserId","getUserList","getUserListByPage","getToken","user","actions","Login","loginInfo","commit","Promise","resolve","reject","then","response","catch","error","GetPermissionByUserId","userId","GetUserList","GetUserListByPage","tablePage","console","log"],"sources":["D:/program/LanqiaoVue/vue-demo/src/store/modules/user.js"],"sourcesContent":["import { login } from '@/api/login'//引入登录 api 接口\r\nimport {getPermissionByUserId} from '@/api/permission' // 引入获取菜单权限 api 接口\r\nimport { getUserList,getUserListByPage } from '@/api/system' // 引入 系统管理接口\r\n\r\nimport { getToken } from '@/utils/auth'\r\n\r\n\r\nconst user = {\r\n  // state: {\r\n  //   // token: getToken(),\r\n  //   // 是否登录\r\n  //   isLogin:false,\r\n  //   userId:'1'\r\n  // },\r\n  // mutations: {\r\n  //   SET_TOKEN: (state, token) => {\r\n  //     state.token = token\r\n  //   },\r\n  //   SET_ISLOGIN:(state,isLogin)=>{\r\n  //       state.isLogin=isLogin\r\n  //   },\r\n  //   SET_USERID:(state,userId)=>{\r\n  //     state.userId=userId\r\n  //   }\r\n  // },\r\n  actions: {\r\n    // 登录\r\n    Login({ commit }, loginInfo) { //定义 Login 方法，在组件中使用 this.$store.dispatch(\"Login\") 调用\r\n      return new Promise((resolve, reject) => { //封装一个 Promise\r\n        login(loginInfo).then(response => { //使用 login 接口进行网络请求\r\n          // commit('') //提交一个 mutation，通知状态改变\r\n          // commit('SET_ISLOGIN',true)\r\n          // commit('SET_USERID',1)\r\n          resolve(response) //将结果封装进 Promise\r\n        }).catch(error => {\r\n          reject(error)\r\n        })\r\n      })\r\n    },\r\n\r\n    // 获取菜单权限列表\r\n    GetPermissionByUserId({commit},userId){\r\n      return new Promise((resolve, reject) => { //封装一个 Promise\r\n        getPermissionByUserId(userId).then(response => { //使用 permission 接口进行网络请求\r\n          resolve(response) //将结果封装进 Promise\r\n        }).catch(error => {\r\n          reject(error)\r\n        })\r\n      })\r\n    },\r\n\r\n    // 获取员工列表\r\n    GetUserList({commit}){\r\n      return new Promise((resolve, reject) => { //封装一个 Promise\r\n        getUserList().then(response => { //使用 permission 接口进行网络请求\r\n          resolve(response) //将结果封装进 Promise\r\n        }).catch(error => {\r\n          reject(error)\r\n        })\r\n      })\r\n    },\r\n\r\n    GetUserListByPage({commit},tablePage){\r\n      console.log(tablePage)\r\n      return new Promise((resolve, reject) => { //封装一个 Promise\r\n        getUserListByPage(tablePage).then(response => { //使用 permission 接口进行网络请求\r\n          resolve(response) //将结果封装进 Promise\r\n        }).catch(error => {\r\n          console.log(\"eee\")\r\n          reject(error)\r\n         \r\n        })\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\nexport default user\r\n"],"mappings":";AAAA,SAASA,KAAK,QAAQ,aAAa;AACnC,SAAQC,qBAAqB,QAAO,kBAAkB,EAAC;AACvD,SAASC,WAAW,EAACC,iBAAiB,QAAQ,cAAc,EAAC;;AAE7D,SAASC,QAAQ,QAAQ,cAAc;AAGvC,IAAMC,IAAI,GAAG;EACX;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,OAAO,EAAE;IACP;IACAC,KAAK,uBAAaC,SAAS,EAAE;MAAA,IAArBC,MAAM,QAANA,MAAM;MAAiB;MAC7B,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;QAAE;QACxCZ,KAAK,CAACQ,SAAS,CAAC,CAACK,IAAI,CAAC,UAAAC,QAAQ,EAAI;UAAE;UAClC;UACA;UACA;UACAH,OAAO,CAACG,QAAQ,CAAC,EAAC;QACpB,CAAC,CAAC,CAACC,KAAK,CAAC,UAAAC,KAAK,EAAI;UAChBJ,MAAM,CAACI,KAAK,CAAC;QACf,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IAED;IACAC,qBAAqB,wCAAUC,MAAM,EAAC;MAAA,IAAfT,MAAM,SAANA,MAAM;MAC3B,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;QAAE;QACxCX,qBAAqB,CAACiB,MAAM,CAAC,CAACL,IAAI,CAAC,UAAAC,QAAQ,EAAI;UAAE;UAC/CH,OAAO,CAACG,QAAQ,CAAC,EAAC;QACpB,CAAC,CAAC,CAACC,KAAK,CAAC,UAAAC,KAAK,EAAI;UAChBJ,MAAM,CAACI,KAAK,CAAC;QACf,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IAED;IACAG,WAAW,8BAAU;MAAA,IAARV,MAAM,SAANA,MAAM;MACjB,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;QAAE;QACxCV,WAAW,EAAE,CAACW,IAAI,CAAC,UAAAC,QAAQ,EAAI;UAAE;UAC/BH,OAAO,CAACG,QAAQ,CAAC,EAAC;QACpB,CAAC,CAAC,CAACC,KAAK,CAAC,UAAAC,KAAK,EAAI;UAChBJ,MAAM,CAACI,KAAK,CAAC;QACf,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IAEDI,iBAAiB,oCAAUC,SAAS,EAAC;MAAA,IAAlBZ,MAAM,SAANA,MAAM;MACvBa,OAAO,CAACC,GAAG,CAACF,SAAS,CAAC;MACtB,OAAO,IAAIX,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;QAAE;QACxCT,iBAAiB,CAACkB,SAAS,CAAC,CAACR,IAAI,CAAC,UAAAC,QAAQ,EAAI;UAAE;UAC9CH,OAAO,CAACG,QAAQ,CAAC,EAAC;QACpB,CAAC,CAAC,CAACC,KAAK,CAAC,UAAAC,KAAK,EAAI;UAChBM,OAAO,CAACC,GAAG,CAAC,KAAK,CAAC;UAClBX,MAAM,CAACI,KAAK,CAAC;QAEf,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EACF;AACF,CAAC;AAED,eAAeX,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}